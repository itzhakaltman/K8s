Auth in kube-apiserver:

- Static Password File
- Static Token File
- Certificates
- Identity Services (LDAP, Kerberos, etc.)

Static Password File:
------------------------------------------------------------------------------------------------------------------------
user-details.csv                |       kube-apiserver.service
password123, user1, u0001       |       ExecStart=/usr/local/bin/kube-apiserver \\
password123, user2, u0002       |           --basic-auth-file=user-details.csv \\
password123, user3, u0003       |

OR:
/etc/kubernetes/manifests/kube-apiserver.yaml
---
spec:
  containers:
  - command:
    - kube-apiserver
    - --basic-auth-file=user-details.csv
    image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3
    name: kube-apiserver

User and Password Specification:
curl -v -k https://master-node-ip:6443/api/v1/pods -u "user1:password123"



Static Password File:
------------------------------------------------------------------------------------------------------------------------
user-details.csv                        |       user-token-details.csv
password123, user1, u0001, group1       |       Pl3jUH4bVFc8bvGh9jYgVc1Efcv4dCDR, user10, u0010, group1
password123, user2, u0002, group1       |       Pl3jUH4bVFc8bvGh9jYgVc1Efcv4dCDR, user10, u0010, group1
password123, user3, u0003, group1       |       Pl3jUH4bVFc8bvGh9jYgVc1Efcv4dCDR, user10, u0010, group1

--token-auth-file=user-details.csv

curl -v -k https://master-node-ip:6443/api/v1/pods --header "Authorization: Bearer Pl3jUH4bVFc8bvGh9jYgVc1Efcv4dCDR"



Follow the below instructions to configure basic authentication in a kubeadm setup.

Create a file with user details locally at /tmp/users/user-details.csv

# User File Contents
password123,user1,u0001
password123,user2,u0002
password123,user3,u0003
password123,user4,u0004
password123,user5,u0005

* * * * * * * * * * *

Edit the kube-apiserver static pod configured by kubeadm to pass in the user details. The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml

apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
      <content-hidden>
    image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3
    name: kube-apiserver
    volumeMounts:
    - mountPath: /tmp/users
      name: usr-details
      readOnly: true
  volumes:
  - hostPath:
      path: /tmp/users
      type: DirectoryOrCreate
    name: usr-details


Modify the kube-apiserver startup options to include the basic-auth file


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --authorization-mode=Node,RBAC
      <content-hidden>
    - --basic-auth-file=/tmp/users/user-details.csv
Create the necessary roles and role bindings for these users:


---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

---
# This role binding allows "jane" to read pods in the "default" namespace.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: user1 # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
Once created, you may authenticate into the kube-api server using the users credentials

curl -v -k https://localhost:6443/api/v1/pods -u "user1:password123"

* * * * * * * * * * *

1. Create CertificateSigningRequest Object
2. Review Requests
3. Approve Requests
4. Share Certs to Users


openssl genrsa -out jane.key 2048

openssl req -new -key jane.key -subj "/CN=jane" -out jane.csr

kubectl get csr

kubectl certificate approve jane

kubectl get csr jane -o yaml
# echo "LS0...Qo=" | base64 --decode


cat /etc/kubernetes/manifests/kube-controller-manager.yaml

========================================================================================================================

API Groups:

/metrics
/healthz
/version
/api          -  core group
/apis         -  named group
/logs


core    /api    /v1    namespaces
                       pods
                       rs
                       events
                       endpoints
                       nodes
                       bindings
                       PV
                       PVC
                       configmaps
                       secrets
                       services

named    /apis    /apps    /v1    /deployments    list
                                                  get
                                                  create
                                                  delete
                                                  update
                                                  watch

                                  /replicasets
                                  /statefulsets

                  /extensions
                  /networking.k8s.io    /v1    /networkpolicies

                  /storage.k8s.io
                  /authentication.k8s.io

                  /certificates.k8s.io    /v1    /certificatesigningrequests

                               |                      |
                          API Groups                Verbs
                                          |
                                      Resources

curl http://localhost:6443 -k

curl http://localhost:6443/apis -k | grep "name"


curl http://localhost:8001 -k                         Actor -> Kubectl Proxy -> Kube ApiServer

kube proxy != kubectl proxy


========================================================================================================================

Authorization Mechanisms:                      ExecStart=/usr/local/bin/kube-apiserver \\
- Node Authorizer                                --authorization-mode=AlwaysAllow
- ABAC (Attribute Based)
- RBAC
- Webhook (ex. Open Policy Agent)
- AlwaysAllow                          ---      default
- AlwaysDeny




========================================================================================================================

kubectl create serviceaccount dashboard-sa

kubectl get serviceaccount

kubectl describe serviceaccount dashboard-sa                         TOKEN STORED INSIDE THE SECRET

kubectl get serviceaccount

curl https://192.168.56.70:6443/api - insecure
     --header "Authorization: Bearer eyJhbG..."


========================================================================================================================

Images:

image: nginx                        Image/Repository
image: library/nginx                User/Account
image: docker.io/library/nginx      Registry (or Private Registry)


Google Registry:
gcr.io/kubernetes-e2e-test-images/dnsutils


kubectl create secret docker-registry regcred \
   --docker-server=private-registry.io \
   --docker-username=registry-user \
   --docker-password=registry-password \
   --docker-email=registry-user@org.com

========================================================================================================================

kubectl api-resources --namespaced=true

kubectl api-resources --namespaced=false
