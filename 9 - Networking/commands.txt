ip link

ip addr add 192.168.1.11/24 dev eth0

route

ip route add 192.168.2.0/24 via 192.168.1.1

ip route add default via 192.168.2.1
ip route add 0.0.0.0 via 192.168.2.1

cat /proc/sys/net/ipv4/ip_forward           default value - 0 - No Forward
echo 1 > /proc/sys/net/ipv4/ip_forward                      1 - Forward Enabled


          /etc/sysctl.conf
          ...
          net.ipv4.ip_forward = 1
          ...

cat >> /etc/hosts
192.168.1.11    db


cat /etc/resolv.conf
nameserver    192.168.1.100
search        mycompany.com prod.mycompany.com


cat /etc/nsswitch.conf
...
hosts:    files dns                     hosts:    dns files
...

nslookup / dig

ip netns add red
ip netns add blue
ip netns

ip netns exec red ip link

ip -n red link

ip netns exec red ip link     ==    ip -n red link

ip link add veth-red type veth peer name veth-blue

ip link set veth-red netns red
ip link set veth-blue netns blue

ip -n red addr add 192.168.15.1 dev veth-red
ip -n blue addr add 192.168.15.2 dev veth-blue

ip -n red link set veth-red up
ip -n blue link set veth-blue up

ip netns exec red ping 192.168.15.2

ip netns exec red arp
ip netns exec blue arp

ip link add v-net-0 type bridge

docker run --network none nginx
docker run --network host nginx
docker run nginx                   bridge
docker network ls

ip netns

docker inspect 942d70e585b2

ip link
ip -n b3165c10a92b link


------------------------------------------------------------------------------------------------------------------------

ps -aux | grep kubelet

--network-plugin

ls /etc/cni/net.d/                     CNI in use

ip addr show weave

------------------------------------------------------------------------------------------------------------------------

cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep cluster-ip-range

kubectl exec -it hr -- nslookup mysql.payroll > /root/CKA/nslookup.out

