YAML - Yet Another Markup Language

JSON - JavaScript Object Notation

------------------------------------------------------------------------------------------------------------------------
https://github.com/json-path/JsonPath
------------------------------------------------------------------------------------------------------------------------

---
List of Cars:
-  car registration number: 011
   car name:  Civic
   owner of car: Zaim Khan
   model number: xyz
   price: 20 lacs
   color: black
-  car registration number: 012
   car name:  Mehran
   owner of car: Sara Khan
   model number: xyzasd21
   price: 10 lacs
   color: white
-  car registration number: 013
   car name:  Cultus
   owner of car: Taimur Ali
   model number: xy12z
   price: 15 lacs
   color: grey
...

------------------------------------------------------------------------------------------------------------------------

{
"List of Cars": [
  {
    "car registration number": "011",
    "car name": "Civic",
    "owner of car": "Zaim Khan",
    "model number": "xyz",
    "price": "20 lacs",
    "color": "black"
  },
  {
    "car registration number": "012",
    "car name": "Mehran",
    "owner of car": "Sara Khan",
    "model number": "xyzasd21",
    "price": "10 lacs",
    "color": "white"
  },
  {
    "car registration number": "013",
    "car name": "Cultus",
    "owner of car": "Taimur Ali",
    "model number": "xy12z",
    "price": "15 lacs",
    "color": "grey"
  }
]
}

------------------------------------------------------------------------------------------------------------------------

---
kubectl get nodes -o=jsonpath='{.items[*].metadata.name}{"\n"}{.items[*].status.capacity.cpu}'
...

Loops Range:

FOR EACH NODE                                #    '{range .items[*]}
                                             #
    PRINT NODE NAME \t PRINT CPU COUNT \n    #     {.metadata.name} {"\t"} {.status.capacity.cpu} {"\n"}
                                             #
END FOR                                      #     {end}'


---
kubectl get nodes -o=jsonpath='{range .items[*]}{.metadata.name} {"\t"} {.status.capacity.cpu} {"\n"}{end}'
...

---
kubectl get nodes -o=custom-columns=<COLUMN NAME>:<JSON PATH>,<COLUMN NAME>:<JSON PATH>
...

---
kubectl get nodes -o=custom-columns=NODE:.metadata.name,CPU:.status.capacity.cpu
...


Sorting:

---
kubectl get nodes --sort-by=.metadata.name
kubectl get nodes --sort-by=.status.capacity.cpu
kubectl get pv --sort-by=.spec.capacity.storage
...


$.status.containerStatuses[?(@.name=="redis-container")].restartCount

kubectl get pv --sort-by=.spec.capacity.storage -o=custom-columns=NAME:.metadata.name,CAPACITY:.spec.capacity.storage

------------------------------------------------------------------------------------------------------------------------

kubectl get nodes -o=jsonpath='{.items[*].metadata.name}{"\n"}' > /opt/outputs/node_names.txt

kubectl get nodes -o=jsonpath='{.items[*].status.nodeInfo.osImage}{"\n"}'

kubectl config view --kubeconfig=/root/my-kube-config

kubectl config view --kubeconfig=my-kube-config -o jsonpath="{.users[*].name}" > /opt/outputs/users.txt

kubectl get pv --sort-by=.spec.capacity.storage > /opt/outputs/storage-capacity-sorted.txt

kubectl get pv --sort-by=.spec.capacity.storage -o=custom-columns=NAME:.metadata.name,CAPACITY:.spec.capacity.storage > /opt/outputs/pv-and-capacity-sorted.txt

kubectl config view --kubeconfig=my-kube-config -o jsonpath="{.contexts[?(@.context.user=='aws-user')].name}" > /opt/outputs/aws-context-name

------------------------------------------------------------------------------------------------------------------------